import base

'''
Counting DNA nucleotides
'''
def count_nucleotides(dna) :
    aCount = 0
    cCount = 0
    gCount = 0
    tCount = 0

    for n in dna :
        if n.upper() == 'A' :
            aCount += 1
        elif n.upper() == 'C' :
            cCount += 1
        elif n.upper() == 'G' :
            gCount += 1
        elif n.upper() == 'T' :
            tCount += 1
        else :
            raise "Unknown nucleotide : " + n

    print (aCount, cCount, gCount, tCount)

'''
transribing DNA into RNA
'''
def transcribe(dna) :
    print "".join('U' if n.upper() == 'T' else n.upper() for n in dna)

'''
complementing a strand of DNA
'''
def complement(dna) :
       cdna = base.complement(dna)
       print cdna



'''
Rabbits and Recurrence Relations
n months, k pairs per mating
'''
def litter(n,k) :
    if n == 1 :
        return 1
    elif n == 2 :
        return 1
    else :
        kn = kn2 = kn1 = 1
        for i in xrange(3,n+1) :
            kn = k*kn2 + kn1
            kn2 = kn1
            kn1 = kn

    print kn

def mortal_litter() :

    def baby(n) :


if __name__ == '__main__' :
    #count_nucleotides('GTGGTGAATTGGATAGGCATTCGTTAAGCTGATTCCACTTCCGAGGTGAGTTCCTGCCTTATGGGTGACGAAATCCCGAGCCTACATGCTGATAAGTTCCATCCCCGGCCTCAGGGACAATCGGACCGCGCAGGCCCCAATGAGCGTTGCGGGCAGACTTGACCGTTGGGAATCAGTTGAGGACTGAAAAGTGCGTAACTTCTTCAATGGACCTGGAGCCCCAATCACGGGGTGCGTCAAGTACGTGCCCCGCATTCTTCCAATTTTCACCGAGGGTACTGGACGGAATAAGCACCTCTTTCAGAGGCGATATAGGCACGAAACTACGTAGCTAGATCTTAGCAGGATCCGGAAACGTCGCAAGTATCCTCTAACCTTCAATAGGTCCGAGCCGTGCGGAGTCGGGTCGTTCCGTAACAGCGTGAGCATGCGATAAAGTTACAAGGTCAGTAAATTGTTGCGCCCGATTTATGCGGTGAATATCAATACTCTCCCTAATCGGACTGAGAAGGCCGCTCGTTTTACTAGACTAGCCATCGGCGGATTAATTTTTTAAAATTCCAATTGCCAAGACTACCGATTTCTCATATTTTCTTGCAGCATATTCGGATCTCTGGATACCACTGCCCGACACGCGTGAACCTGTGGTCCGGATATTCCTTGGACGGCCCTTCTCTAAGGGACAGTATCTACTCCGCTCATCTCAGGCTGTCCATAACGGCTTCAGGATGTGTACAAGCGCTTTATCCTCGGACAGTTTGTAGATATCTTGCGTGGCCCTAAAAGTCCAGCGCATATTC')
    #transcribe('TACAAGCCTTCTGTATGGGGCGTCAGGGTATCAGCAACGGGAGGTTATCACGGTGGCGGGTCTTTGGTGGTTTTGCACGGTACCCAGAACACGGGATAGTCCCCGCGAATTTGAGCGGCGAACGGGATCTCGCAGGCCATAATGTGAGAGGGGTTTTGCGACATCTTCGGCAGGTACCGCCTGGACCCGTCGGCGGTTGACGGTTCCACCCGGAACATAAATAAATTCTCCACATAAATGGAGGAATTCTGGTGGTGGACATTTCAGGGCGTCAACTCTTTCGTGTATACGAGGCAGGGGCAGATTGCGTGCGCTCTGCGGCTAAAAATGGGATGACTATTGGACCCTAATTAGTCTTTAAAACTGCAATGGCGATCTCAGGTCTCCCCAAACTGAGTAGGATTGTATATAGGACATGTATACACATGGTTTGGTCAGGCCCAGCCGTCGTCGTTGAGGATATCATCTGCCACCAGGGGGCCACGAAAATGTGCATAACTGATTCATTTGCTTAAAGTAGCACTACAACAAGAGGAGCCGCTTTATGCCAAAACCACATCTTACAGAAACGGGGGGAGACACCCAGGGTCACCTATAATCCTGTTTGTTACTGGCGAAGGATCCTAACAGCGATTATTGGCTCCTTTAAAGGATCCGTGAAGGCACCCCATTTGATTCACCGCATCTTAAAACAGATGTTTCCTTTTGAAATGCAAGTCTATTCTGCTTGCCCGATAATGTGATTGCCTCAGTCAAGCTAGTAAACCGCCTGGTAAGTCGTAGTGCTTGTACGTATGTTGTAGCGGGTCAGCGGATCCGTTAATAAGTAGGTGCTCTCTTACTCATTAGTACAGGGCTTGTTAGCAAGGTTAATATATAGTATCACATCCACCCGGTTCCCAACTCCACGACTCGCGCAAATGTAGTACATGGCCGCCCGTATGCGTATCCTTTTCGAATGCCACCCCCCCAGAGATA')
    #complement('TTTATAAACCCGTTGTGCCCGCCCTTCGGCCTGTGTCGACCCCCAGCACTGCCGACGAGTCTTCTATTGAGGGACCAGATTGCCGCACGTTGGTATTCTTGCTAGGGCAAATCGCGGGTGTTGGCGAAACCTTATCCATCAGCGACCATAGTGTACGCTATAATTATTAGTTACTGTGTCGATATAGGTCTCTGTGTCTTACACCACAGAGGGATGTTGCTAGTGAATTCCGAAGGAATTAAGATGACAAAAGTGGAGATGAGGAAGGGGTCTGATCCCAATTCTGTAGTAGTCAGTAGACGGGGCCAGTCAGTCTACGCCCACAGGGGGGATCAGTTCTCCACGGTGCCCGACCGATTATAGAATGCGGGCTCAATCAGTGCTGTAGCGCGAGAATTACAAGCCCCGAGCTCGTCTCGCCCCAGGACGTGGACCCTCTTAAAAGCTCACTCCATCGCGCGTTGGATCTTCCGGCTACCGGCCGACTCTACCCGAGGGTAATGAAAATAAAGTGAACTTTTCTTTCTATGCTAAGCAATTCTCAAGAGGAGAAGGCCTAACATACGCAGGATTGGCGGATTGTCGCGACATCCACTCCTTGGTCTGCAGTCGGAAAGCTGGGGAAAGACAGAGCCCCCAATTCCGGGAGGAGGCCGAGAGACTCCTTTCATCTCAGTGAGTCTGTCACCAAAACGATATAGATTTCTTAAATGTGGAGCAGAGTAGAGATTTCCCTGACTGCCATGACAGGCGAACCCCAAAAGCGCGACGGTAATATGTCCGGTTCGTCCATGGATCAAACGGTGTGTTGCTTTCAATACGTAATGTGCTCAGACAATCTAACGCATAGTATTCCCAGTCTGCTGCCCTATAAGGTGGAAGCTA')
    litter(30,3)